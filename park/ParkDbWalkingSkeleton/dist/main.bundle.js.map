{"version":3,"sources":["C:/code/parkCosmos/src/client/$_gendir lazy","C:/code/parkCosmos/src/client/app/app.component.ts","C:/code/parkCosmos/src/client/app/app.module.ts","C:/code/parkCosmos/src/client/app/lot.service.ts","C:/code/parkCosmos/src/client/app/lot.ts","C:/code/parkCosmos/src/client/app/lots.component.html","C:/code/parkCosmos/src/client/app/lots.component.ts","C:/code/parkCosmos/src/client/environments/environment.ts","C:/code/parkCosmos/src/client/main.ts"],"names":[],"mappings":"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","file":"main.bundle.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncatched exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"../../../../../src/client/$$_gendir lazy recursive\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/code/parkCosmos/src/client/$$_gendir lazy\n// module id = ../../../../../src/client/$$_gendir lazy recursive\n// module chunks = main","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  template: `\n    <h1>Parking Lots</h1>\n    <div class=\"header-bar\"></div>\n    <app-lots></app-lots>  \n    \n  `,\n  styles: []\n})\nexport class AppComponent {\n  title = 'app';\n}\n\n\n\n// WEBPACK FOOTER //\n// C:/code/parkCosmos/src/client/app/app.component.ts","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { AppComponent } from './app.component';\nimport { LotsComponent } from './lots.component';\n\nimport { LotService } from './lot.service';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    LotsComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpClientModule\n  ],\n  providers: [LotService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n\n\n// WEBPACK FOOTER //\n// C:/code/parkCosmos/src/client/app/app.module.ts","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { ILot, Lot } from './lot';\r\n\r\nconst api = '/api';\r\n\r\n@Injectable()\r\nexport class LotService {\r\n    constructor(private http: HttpClient) {}\r\n\r\n    getLots() {\r\n        return this.http.get<Array<Lot>>(`${api}/lots`);\r\n    }\r\n\r\n    addLot(aLot: Lot) {\r\n        return this.http.post<Lot>(`${api}/lot/`, aLot);\r\n    } \r\n \r\n    updateLot(aLot: Lot) {\r\n        return this.http.put<Lot>(`${api}/lot/${aLot.lotId}`, aLot);\r\n    } \r\n\r\n    deleteLot(aLot: Lot) {\r\n        return this.http.delete(`${api}/lot/${aLot.lotId}`);\r\n    } \r\n\r\n}\n\n\n// WEBPACK FOOTER //\n// C:/code/parkCosmos/src/client/app/lot.service.ts","export interface ILot {\r\n    lotId: number;\r\n    lotName: string;\r\n    lotLocation: string;\r\n    lotVacancy: number;\r\n}\r\n\r\nexport class Lot implements ILot {\r\n    lotId: number;\r\n    lotName: string;\r\n    lotLocation: string;\r\n    lotVacancy: number;\r\n}\n\n\n// WEBPACK FOOTER //\n// C:/code/parkCosmos/src/client/app/lot.ts","module.exports = \"<div>\\r\\n    <ul class=\\\"lots\\\">\\r\\n      <li *ngFor=\\\"let lot of lotCollection\\\" (click)=\\\"onSelect(lot)\\\" [class.selected]=\\\"lot === selectedLot\\\">\\r\\n        <button class=\\\"delete-button\\\" (click)=\\\"deleteLot(lot)\\\">Delete</button>\\r\\n        <div class=\\\"lot-element\\\">\\r\\n          <div class=\\\"lotId\\\">{{lot.lotId}}</div>\\r\\n          <div class=\\\"lotName\\\">{{lot.lotName}}</div>\\r\\n          <div class=\\\"lotLocation\\\">{{lot.lotLocation}}</div>\\r\\n          <div class=\\\"lotVacancy\\\">{{lot.lotVacancy}}</div>\\r\\n        </div>\\r\\n      </li>\\r\\n    </ul>\\r\\n    <div class=\\\"editarea\\\">\\r\\n      <button (click)=\\\"enableEditMode()\\\">Add New Lot</button>\\r\\n      <div *ngIf=\\\"currentLot\\\">\\r\\n        <div class=\\\"editfields\\\">\\r\\n          <div>\\r\\n            <label>id: </label>\\r\\n            <input [(ngModel)]=\\\"currentLot.lotId\\\" placeholder=\\\"lotId\\\" *ngIf=\\\"editMode\\\" />\\r\\n            <label *ngIf=\\\"!editMode\\\" class=\\\"value\\\">{{currentLot.lotId}}</label>\\r\\n          </div>\\r\\n          <div>\\r\\n            <label>name: </label>\\r\\n            <input [(ngModel)]=\\\"currentLot.lotName\\\" placeholder=\\\"lotName\\\" />\\r\\n          </div>\\r\\n          <div>\\r\\n            <label>location: </label>\\r\\n            <input [(ngModel)]=\\\"currentLot.lotLocation\\\" placeholder=\\\"location\\\" />\\r\\n          </div>\\r\\n          <div>\\r\\n            <label>Vacancy: </label>\\r\\n            <input [(ngModel)]=\\\"currentLot.lotVacancy\\\" placeholder=\\\"lotVacancy\\\" />\\r\\n          </div>\\r\\n        </div>\\r\\n        <button (click)=\\\"cancelEditMode()\\\">Cancel</button>\\r\\n        <button (click)=\\\"saveLot()\\\">Save</button>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n  \"\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/code/parkCosmos/src/client/app/lots.component.html\n// module id = ../../../../../src/client/app/lots.component.html\n// module chunks = main","import { Component, OnInit } from '@angular/core';\r\n\r\nimport { ILot, Lot } from './lot';\r\nimport { LotService } from './lot.service';\r\n\r\n@Component ({\r\n    selector: 'app-lots',\r\n    templateUrl: './lots.component.html'\r\n})\r\nexport class LotsComponent implements OnInit {\r\n    editMode: boolean = false;\r\n    currentLot: Lot;\r\n    lotCollection: any = [];\r\n\r\n    constructor(private lotService: LotService) {}\r\n\r\n    ngOnInit() {\r\n        this.getLots();\r\n    }\r\n\r\n    // Get full collection of Lots\r\n    getLots() {\r\n        return this.lotService.getLots().subscribe( lotList => {\r\n            this.lotCollection = lotList;\r\n        });\r\n    }\r\n\r\n    // Add or Update a Lot\r\n    saveLot () {\r\n        if (this.editMode) {\r\n          this.lotService.addLot(this.currentLot).subscribe(aLot => {\r\n            this.editMode = false;\r\n            this.currentLot = null;\r\n            this.lotCollection.push(aLot);\r\n          });\r\n        } else {\r\n          this.lotService.updateLot(this.currentLot).subscribe(aLot => {\r\n            this.editMode = false;\r\n            this.currentLot = null;\r\n          });\r\n        }\r\n      }\r\n\r\n      // Delete a Lot\r\n      deleteLot(pLot: Lot) {\r\n        this.lotService.deleteLot(pLot).subscribe(res => {\r\n          this.lotCollection = this.lotCollection.filter(l => l !== pLot);\r\n          if (this.currentLot === pLot) {\r\n            this.currentLot = null;\r\n          }\r\n        });\r\n      }\r\n    \r\n      onSelect(pLot: Lot) {\r\n        this.editMode = false;\r\n        this.currentLot = pLot;\r\n      }\r\n\r\n      enableEditMode() {\r\n        this.editMode = true;\r\n        this.currentLot = new Lot();\r\n      }\r\n\r\n      cancelEditMode() {\r\n        this.editMode = false;\r\n        this.currentLot = null;\r\n      }\r\n}\n\n\n// WEBPACK FOOTER //\n// C:/code/parkCosmos/src/client/app/lots.component.ts","// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `.angular-cli.json`.\n\nexport const environment = {\n  production: false\n};\n\n\n\n// WEBPACK FOOTER //\n// C:/code/parkCosmos/src/client/environments/environment.ts","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n\n\n\n// WEBPACK FOOTER //\n// C:/code/parkCosmos/src/client/main.ts"],"sourceRoot":"webpack:///"}